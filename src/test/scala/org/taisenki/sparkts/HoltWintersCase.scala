package org.taisenki.sparkts

import com.cloudera.sparkts.models.HoltWinters
import org.apache.spark.mllib.linalg.Vectors

object HoltWintersCase {

  def main(args:Array[String]): Unit ={
    testS1()
  }

  def testS1(): Unit ={
    val dataStr = "0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,26.256,0.156,0.156,0.192,28.68,27.864,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.156,0.0,0.0,0.156,0.0,0.156,1.248,15.432,26.184,27.936,27.636,28.428,28.02,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.168,27.804,28.308,28.62,27.876,27.96,27.888,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.204,28.596,27.6,26.28,27.984,27.828,28.392,24.216,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,28.572,29.184,28.512,26.016,27.756,27.636,25.452,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,28.596,28.272,28.308,28.416,27.12,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.156,27.624,28.476,28.308,27.996,28.824,28.092,29.256,0.972,0.9,0.636,0.612,0.624,0.624,0.756,0.612,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.156,27.624,29.508,28.512,24.744,27.252,28.932,25.92,28.872,15.204,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.056,0.0,0.156,23.808,29.328,0.792,29.04,29.388,26.868,0.108,0.108,28.824,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0"
    val data = Vectors.dense(dataStr.split(",").map(_.toDouble))

    val period = 24
    val modeltype = "additive" //additive \ multiplicative
    val methods = "LBFGSB" //BOBYQA\POWELL\LBFGS\LBFGSB
    val periodNew = if(data.size>=period*7) (7*period) else period
    val model = HoltWinters.fitModel(data, 48, modeltype, methods)
    val predictedVectors=Vectors.dense((0 to 48).map(_.toDouble).toArray)

    println(methods)
    model.forecast(data, predictedVectors)
    println(s"a = ${model.alpha}, b = ${model.beta}, c = ${model.gamma}")
    println(predictedVectors)
  }

  def testS0(): Unit ={
    val dataStr = "0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.632,5.564,5.58,5.6,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.704,5.62,5.604,5.58,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.656,5.604,5.672,5.584,0.0,0.0,0.0,0.008,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.912,5.864,5.864,5.84,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.7,5.54,5.544,5.476,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.824,5.692,5.66,5.628,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.68,5.528,5.528,5.532,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.828,5.624,5.612,5.576,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.688,5.596,5.656,5.588,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6.06,5.86,5.844,5.804,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.816,5.648,5.66,5.668,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.564,5.612,5.572,5.572,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.572,5.6,5.592,5.552,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.184,5.604,5.6,5.516,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.084,5.624,5.636,5.668,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.684,5.664,5.696,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.592,5.6,5.624,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.664,5.572,5.584,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.628,5.592,5.572,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.64,5.584,5.588,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.552,5.716,5.704,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.788,5.732,5.708,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.008,0.0,0.0,0.0,0.0,0.0,5.704,5.7,5.668,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.604,5.612,5.596,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.612,5.6,5.612,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.604,5.6,5.572,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.596,5.556,5.576,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.648,5.596,5.616,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.852,5.84,5.832,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.596,5.588,5.588,0.0,0.0";
    val data = Vectors.dense(dataStr.split(",").map(_.toDouble))
    //    val dataStr = "0,1,0,2,0,3,1,2,1,3,0,4,2,5,0,1,0,3,0,2,1,2,3,4,5,1,2,3,1,2,3,4,1,2,3,4,1,2,3,4,1"

    //    val dataArr = Array(24.27, 22.818, 16.782, 14.376, 11.646, 14.97, 15.528, 28.752, 20.028, 29.742, 28.356, 32.796, 39.948, 34.866, 34.038, 30.468, 30.666, 36.264, 41.802, 39.186, 43.224, 39.642, 28.434, 22.956, 18.816, 21.072, 17.256, 17.262, 12.708, 10.89, 21.75, 22.872, 19.92, 23.316, 21.708, 20.304, 26.058, 27.474, 25.38, 20.574, 26.61, 28.998, 30.312, 36.924, 38.796, 35.016, 25.458, 16.44, 15.522, 14.676, 12.462, 11.982, 10.47, 10.56, 14.358, 21.42, 25.512, 21.702, 21.822, 23.436, 27.546, 32.598, 31.56, 27.114, 20.658, 23.124, 26.646, 34.296, 41.958, 40.452, 30.054, 20.04, 16.878, 15.096, 14.838, 12.66, 11.052, 9.744, 16.194, 24.138, 26.286, 21.468, 20.484, 22.146, 18.888, 19.542, 15.39, 15.54, 14.598, 23.994, 24.036, 29.112, 25.32, 21.474, 17.016, 15.066, 15.6, 10.452, 9.3, 8.886, 7.944, 8.094, 15.24, 14.502, 14.376, 15.906, 17.1, 14.766, 17.838, 14.868, 14.982, 14.436, 17.106, 25.482, 18.57, 30.672, 25.308, 20.286, 15.84, 10.932, 9.582, 8.004, 9.006, 7.626, 8.052, 7.038, 12.696, 17.274, 16.962, 13.86, 16.128, 15.594, 15.792, 14.676, 15.282, 13.854, 15.744, 15.6, 16.926, 28.002, 23.226, 23.256, 13.806, 11.046, 9.144, 8.274, 7.668, 7.182, 7.02, 7.572, 11.112, 14.4, 16.752, 16.344, 15.33, 18.486, 18.258, 16.35, 20.67, 17.826, 17.478, 19.95, 25.044, 27.954, 26.946, 22.428, 18.204, 14.7, 10.626, 10.032, 9.714, 8.85, 7.788, 8.352, 12.156, 14.91, 20.448, 13.224, 15.768, 17.646, 24.024, 18.522, 16.83, 15.564, 18.774, 19.728, 24.048, 32.106, 26.046, 24.348, 18.06, 12.882, 11.226, 9.708, 8.976, 8.004, 8.772, 8.154, 14.766, 19.212, 18.474, 22.158, 14.91, 15.774, 17.256, 20.256, 16.47, 16.314, 17.004, 19.794, 30.84, 27.216, 24.882, 23.562, 19.992, 11.616, 10.242, 9.48, 10.548, 8.304, 8.97, 8.454, 18.804, 15.324, 14.208, 18.978, 17.076, 19.416, 20.22, 16.86, 15.78, 14.028, 12.936, 31.044, 26.424, 22.14, 28.65, 20.448, 15.144, 13.878, 10.908, 9.708, 9.222, 8.46, 7.704, 7.17, 14.514, 16.908, 19.668, 15.138, 13.152, 13.458, 16.56, 16.716, 13.842, 13.416, 15.474, 13.278, 33.084, 25.842, 23.706, 21.996, 16.794, 12.078, 12.246, 10.974, 8.712, 8.094, 8.244, 7.398, 7.338, 13.116, 18.156, 13.488, 18.09, 16.626, 11.184, 9.93, 12.372, 15.192, 12.624, 16.11, 25.926, 26.256, 29.982, 22.314, 14.49, 12.636, 9.894, 10.014, 9.552, 8.358, 7.596, 7.98, 13.104, 15.39, 14.886, 13.89, 12.234, 16.866, 13.488, 14.094, 19.014, 9.942, 14.706, 21.45, 19.812, 25.158, 23.658, 21.276, 19.68, 13.272, 10.662, 8.808, 7.794, 7.194, 7.332, 7.326, 18.804, 16.524, 16.404, 17.448, 11.814, 14.52, 19.038, 15.648, 13.188, 12.132, 15.576, 13.518, 22.818, 29.364, 26.91, 27.006, 14.454, 11.31, 9.078, 8.778, 7.764, 7.362, 6.936, 6.558, 14.01, 19.188, 12.594, 14.388, 16.566, 15.48, 17.274, 16.902, 16.566, 15.954, 12.036, 21.468, 20.88, 30.018, 26.346, 20.874, 17.316, 14.586, 9.954, 9.114, 8.55, 8.676, 8.802, 7.332, 8.52, 18.864, 23.22, 13.986, 13.032, 11.664, 14.736, 16.056, 15.462, 15.336, 13.968, 24.03, 20.634, 31.488, 29.094, 24.15, 18.138, 11.916, 11.1, 10.512, 8.922, 9.606, 7.92, 8.034, 10.278, 15.024, 16.104, 17.496, 12.882, 18.936, 18.012, 22.782, 14.988, 12.246, 17.28, 28.704, 31.08, 33.078, 24.492, 22.422, 15.948, 14.706, 9.036, 9.54, 8.1, 9.414, 7.812, 7.464, 11.478, 16.32, 15.168, 13.728, 11.682, 14.364, 16.248, 16.578, 12.978, 11.64, 13.242, 16.932, 28.512, 28.95, 22.542, 23.358, 15.828, 11.694, 9.51, 8.322, 8.286, 7.536, 8.67, 8.118, 14.304, 20.85, 16.494, 11.976, 32.448, 11.07, 13.446, 14.052, 13.524, 21.702, 16.23, 18.462, 26.532, 33.732, 24.846, 20.532, 22.332, 11.712, 10.374, 10.986, 8.604, 7.5, 7.062, 7.212, 11.97, 16.656, 17.49, 15.426, 12.846, 16.524, 17.472, 17.838, 15.648, 15.582, 10.632, 13.77, 22.176, 28.29, 21.726, 22.566, 15.84, 13.824, 10.704, 9.15, 9.696, 7.608, 7.452, 10.002, 14.484, 23.16, 12.762, 13.236, 13.662, 12.18, 18.648, 11.67, 15.852, 13.434, 18.048, 19.464, 35.46, 40.386, 28.62, 21.39, 15.546, 14.172, 10.788, 10.788, 9.438, 8.736, 8.358, 8.364, 17.196, 25.638, 18.66, 20.304, 24.444, 22.734, 19.896, 22.728, 21.198, 20.604, 19.344, 18.084, 31.284, 26.286, 25.92, 24.534, 19.842, 15.912, 12.336, 12.138, 11.778, 9.84, 9.582, 8.976, 11.91, 16.314, 21.648, 18.93, 14.562, 13.794, 16.47, 14.97, 20.178, 16.296, 15.48, 21.516, 24.732, 28.938, 27.672, 21.396, 16.344, 12.336, 10.386, 8.418, 8.94, 7.686, 8.112, 7.656, 12.522, 20.508, 18.822, 14.646, 13.284, 15.612, 18.54, 23.778, 16.638, 14.16, 16.548, 15.432, 26.802, 32.634, 23.388, 20.856, 17.112, 13.398, 12.174, 10.854, 9.924, 9.126, 8.76, 8.31, 11.592, 15.972, 12.636, 16.182, 14.724, 12.756, 15.75, 18.738, 13.422, 12.666, 13.056, 20.448, 25.794, 19.632, 22.698, 20.436, 18.57, 10.998, 10.434, 10.44, 8.538, 7.692, 8.676, 8.004, 14.07, 19.542, 19.98, 14.682, 12.156, 11.688, 13.284, 16.926, 14.604, 17.478, 17.112, 18.066, 25.008, 25.59, 27.954, 23.508, 19.626, 12.894, 11.964, 10.26, 9.66, 7.806, 7.296, 10.44, 16.308, 15.888, 20.91, 12.954, 16.104, 12.504, 14.442, 18.018, 12.948, 16.866, 12.858, 21.342, 22.242, 24.342, 27.75, 21.84, 18.078, 14.184, 13.122, 10.236, 8.436, 8.118, 8.478, 6.366, 15.768, 16.914, 10.572, 10.122, 12.132, 14.796, 21.996, 18.21, 12.588, 16.476, 14.466, 23.376, 22.182, 21.0, 25.152, 23.838, 14.646, 11.76, 11.514, 9.312, 8.136, 6.744, 7.806, 7.41, 20.334, 14.586, 18.18, 10.53, 12.0, 11.19, 21.75, 14.262, 14.094, 12.276, 12.756, 18.294, 20.868, 24.534, 25.002, 21.954, 20.664, 12.234, 10.578, 10.158, 8.652, 9.492, 7.548, 7.584, 15.69, 18.594, 14.592, 11.952, 16.392, 13.842, 17.928, 19.332, 18.066, 18.648, 19.332, 26.442, 33.99, 32.526, 0.0, 0.0, 0.0, 0.0)

    //    val data = Vectors.dense(dataArr)

    val modeltype = "additive" //additive \ multiplicative
    val methods = "BOBYQA" //BOBYQA\POWELL\LBFGS\LBFGSB
    val model = HoltWinters.fitModel(data, 24, modeltype, "BOBYQA")
    val model2 = HoltWinters.fitModel(data, 24, modeltype, "LBFGSB")
    val predictedVectors=Vectors.dense((0 to 48).map(_.toDouble).toArray)

    println("BOBYQA")
    model.forecast(data, predictedVectors)
    println(s"a = ${model.alpha}, b = ${model.beta}, c = ${model.gamma}")
    println(predictedVectors)


    println("LBFGSB")
    model2.forecast(data, predictedVectors)
    println(s"a = ${model2.alpha}, b = ${model2.beta}, c = ${model2.gamma}")
    println(predictedVectors)
  }
}
