package org.taisenki.sparkts

import com.cloudera.sparkts.models.{HoltWinters, HoltWintersModel}
import org.apache.spark.mllib.linalg.Vectors

object HoltWintersCase {

  def main(args:Array[String]): Unit ={
    testS1()
  }

  def testS1(): Unit ={
    val dataStr = "1603.6272,1608.6425,1569.9578,1518.9257,1459.3502,1440.8586,1401.1716,1389.6344,1380.382,1405.4254,1442.9795,1470.2592,1519.9626,1662.0717,1844.9143,1989.2449,2171.6438,2349.905,2462.4954,2566.8298,2620.6353,2745.707,2767.0408,2714.3369,2476.679,2427.8164,2493.6855,2526.9382,2497.7009,2509.5159,2466.0674,2471.6965,2476.7444,2603.387,2682.3335,2704.6982,2701.4976,2647.6924,2606.3533,2593.4595,2545.3635,2509.3682,2477.1079,2356.2471,2219.3948,2079.7546,1913.3168,1810.7869,1686.4893,1610.5022,1564.9219,1529.0342,1475.7877,1428.5349,1449.8682,1421.0667,1412.4106,1432.1816,1441.5453,1468.1494,1540.1302,1678.4585,1856.7936,2042.7048,2230.7419,2425.375,2561.3188,2681.0876,2775.6704,2875.9365,2933.9634,2905.8,2675.9004,2690.3376,2695.4346,2749.0208,2730.478,2738.252,2665.3896,2703.7188,2744.988,2826.0117,2874.6436,2880.2073,2901.9739,2888.0366,2814.2656,2836.7458,2797.1079,2716.3069,2679.0352,2552.8687,2390.4431,2209.9419,2023.4021,1928.7346,1836.5807,1727.7736,1664.5448,1621.5333,1610.0698,1545.3275,1529.733,1538.3156,1492.7714,1507.7357,1509.0959,1558.9679,1623.385,1786.9469,1966.5502,2159.6421,2336.7241,2573.4771,2764.8604,2935.7454,3048.4578,3153.75,3182.5864,3257.9377,3005.5928,2986.4363,3006.1567,3003.6179,2968.9446,2997.9961,2952.1367,3001.6633,3025.7251,3097.2217,3152.7688,3217.0486,3122.7964,3152.9277,3134.6294,3095.9688,3081.6641,3030.5276,2957.0474,2819.229,2668.3879,2473.4453,2275.6011,2187.7563,2028.8367,1922.6691,1830.6328,1795.0308,1721.1655,1692.0795,1666.5693,1652.4761,1649.0944,1615.4084,1615.8126,1683.0625,1704.0186,1796.3752,1902.5951,2102.1074,2387.6104,2647.0044,2810.7244,3003.5315,3118.4041,3248.2078,3286.394,3329.8015,3201.8679,3175.8713,3160.1455,3219.3508,3143.7686,3110.4497,3082.0427,3112.9207,3133.2271,3234.0408,3331.0525,3402.564,3385.0122,3375.9949,3331.7566,3334.3345,3268.187,3272.5161,3195.6711,3040.4717,2872.219,2680.447,2455.6423,2313.1262,2137.3015,2056.7537,1944.2314,1889.5709,1822.0851,1781.397,1778.2515,1695.8721,1723.6699,1696.7847,1696.0638,1735.5791,1804.312,1872.9226,2021.4352,2173.5247,2408.3845,2653.5295,2859.9346,3054.8181,3166.5547,3317.1968,3403.4658,3511.218,3328.5615,3290.699,3293.8704,3312.3647,3270.4714,3258.946,3192.8364,3245.6667,3298.8982,3420.5591,3512.2834,3578.6216,3518.5032,3501.7991,3460.8003,3448.4309,3411.0371,3357.3159,3284.332,3125.1064,2929.322,2698.4146,2476.1445,2285.0854"
//    val dataStr = "0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.931,11.862,19.071,17.664,4.662,3.966,7.758,9.852,15.288,27.312,25.542,15.972,8.721,6.9,6.624,8.565,6.981,6.621,6.708,6.588,6.528,4.83,4.623,10.713,9.453,15.6,13.548,0.993,5.43,4.077,4.005,20.157,19.341,20.391,15.3,8.709,6.669,6.939,6.873,6.537,9.255,6.546,7.182,6.69,5.559,6.618,6.852,9.369,23.139,21.15,23.517,19.119,14.361,13.791,11.256,10.827,17.829,14.853,13.095,7.575,5.229,5.898,5.136,5.25,6.705,8.58,8.841,5.841,7.104,9.12,6.273,4.053,18.309,9.657,12.63,7.065,10.203,7.692,4.341,7.725,25.338,14.892,13.647,5.691,5.439,4.917,4.845,5.538,7.95,3.645,6.378,4.806,4.452,4.689,3.879,20.031,13.755,11.757,14.448,8.67,9.195,4.143,4.227,15.858,33.21,20.394,14.517,10.8,6.243,4.458,4.632,4.215,4.815,3.885,4.563,4.353,3.861,4.641,4.101,10.455,13.197,11.445,15.609,7.512,9.537,9.693,5.685,14.967,31.527,20.667,13.746,5.529,5.343,5.205,10.101,7.212,5.643,6.081,6.027,6.606,5.808,7.134,6.927,12.225,13.35,9.141,11.769,7.908,7.401,10.155,12.675,19.512,27.846,38.691,16.665,19.965,7.794,6.864"
    val data = Vectors.dense(dataStr.split(",").map(_.toDouble))

    val period = 48
    val modeltype = "multiplicative" //additive \ multiplicative
    val methods = "BOBYQA" //BOBYQA\POWELL\LBFGS\LBFGSB
    val periodNew = if(data.size>=period*7*2) (7*period) else period
    val model = HoltWinters.fitModel(data, period, modeltype, methods)
    val predictedVectors=Vectors.dense((0 to 96).map(_.toDouble).toArray)

//    val newModel = new HoltWintersModel(modeltype, 48, 1, 0.03, 1)
    println(methods)
    println(model.getHoltWintersComponents(data)._3)
    model.forecast(data, predictedVectors)
    println(s"a = ${model.alpha}, b = ${model.beta}, c = ${model.gamma}")
    println(predictedVectors)
  }

  def testS0(): Unit ={
    val dataStr = "0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.632,5.564,5.58,5.6,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.704,5.62,5.604,5.58,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.656,5.604,5.672,5.584,0.0,0.0,0.0,0.008,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.912,5.864,5.864,5.84,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.7,5.54,5.544,5.476,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.824,5.692,5.66,5.628,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.68,5.528,5.528,5.532,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.828,5.624,5.612,5.576,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.688,5.596,5.656,5.588,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6.06,5.86,5.844,5.804,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.816,5.648,5.66,5.668,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.564,5.612,5.572,5.572,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.572,5.6,5.592,5.552,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.184,5.604,5.6,5.516,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.084,5.624,5.636,5.668,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.684,5.664,5.696,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.592,5.6,5.624,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.664,5.572,5.584,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.628,5.592,5.572,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.64,5.584,5.588,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.552,5.716,5.704,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.788,5.732,5.708,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.008,0.0,0.0,0.0,0.0,0.0,5.704,5.7,5.668,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.604,5.612,5.596,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.612,5.6,5.612,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.604,5.6,5.572,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.596,5.556,5.576,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.648,5.596,5.616,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.852,5.84,5.832,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.596,5.588,5.588,0.0,0.0";
    val dataStr1 = "0.014,0.015,0.015,0.014,0.014,0.015,0.014,0.014,0.015,0.014,0.014,0.014,0.015,0.014,0.015,0.014,0.014,0.015,0.016,6.834,6.85,6.795,6.748,0.014,0.014,0.014,0.015,0.014,0.014,0.014,0.014,0.015,0.014,0.014,0.014,0.014,0.015,0.014,0.014,0.014,0.014,0.015,0.015,6.826,6.714,6.781,6.774,0.014,0.014,0.015,0.015,0.037,0.015,0.036,0.037,0.038,0.014,0.04,0.015,0.015,0.017,0.015,0.015,0.015,0.015,0.016,0.015,6.934,6.9,6.915,6.894,0.014,0.014,0.014,0.014,0.014,0.015,0.015,0.015,0.015,0.015,0.014,0.014,0.014,0.015,0.015,0.015,0.015,0.014,0.015,0.014,7.091,7.114,7.079,6.972,0.016,0.014,0.014,0.014,0.014,0.014,0.014,0.015,0.014,0.016,0.013,0.014,0.015,0.015,0.014,0.015,0.015,0.014,0.015,0.014,6.984,7.0,7.026,7.106,0.015,0.017,0.016,0.037,0.038,0.014,0.037,0.038,0.039,0.015,0.038,0.038,0.039,0.015,0.037,0.037,0.04,0.015,0.038,0.038,6.983,6.984,7.005,7.043,0.038,0.015,0.039,0.038,0.038,0.015,0.038,0.038,0.039,0.015,0.039,0.04,0.039,0.016,0.016,0.016,0.039,0.037,0.017,0.016,7.035,7.06,7.052,7.159,0.039,0.039,0.016,0.038,0.038,0.038,0.015,0.038,0.039,0.038,0.015,0.016,0.015,0.016,0.014,0.014,0.014,0.017,0.016,0.015,6.958,6.903,6.896,6.909,0.015,0.04,0.037,0.037,0.016,0.037,0.039,0.037,0.015,0.035,0.039,0.014,0.014,0.015,0.015,0.015,0.015,0.016,0.015,0.017,7.075,7.093,7.056,7.103,0.015,0.015,0.016,0.016,0.038,0.038,0.016,0.04,0.039,0.015,0.015,0.015,0.015,0.015,0.015,0.015,0.015,0.014,0.015,0.014,6.853,6.866,6.823,6.865,0.014,0.014,0.014,0.014,0.014,0.037,0.037,0.037,0.014,0.036,0.014,0.014,0.015,0.015,0.015,0.015,0.015,0.015,0.014,0.015,7.031,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0"
    val data = Vectors.dense(dataStr1.split(",").map(_.toDouble))

    val modeltype = "additive" //additive \ multiplicative
    val predictedVectors=Vectors.dense((0 to 48).map(_.toDouble).toArray)



    try{
      val methods = "LBFGSB" //BOBYQA\POWELL\LBFGS\LBFGSB
      println(methods)
      val model2 = HoltWinters.fitModel(data, 24, modeltype, methods)
      model2.forecast(data, predictedVectors)
      println(s"a = ${model2.alpha}, b = ${model2.beta}, c = ${model2.gamma}")
      println(predictedVectors)
    } catch {
      case e:Exception => e.printStackTrace();
    }

    try{
      val methods = "BOBYQA" //BOBYQA\POWELL\LBFGS\LBFGSB
      println(methods)
      val model = HoltWinters.fitModel(data, 24, modeltype, methods)
      model.forecast(data, predictedVectors)
      println(s"a = ${model.alpha}, b = ${model.beta}, c = ${model.gamma}")
      println(predictedVectors)
    } catch {
      case e:Exception => e.printStackTrace();
    }
  }
}
