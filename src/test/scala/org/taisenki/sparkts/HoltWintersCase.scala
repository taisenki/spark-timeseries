package org.taisenki.sparkts

import com.cloudera.sparkts.models.HoltWinters
import org.apache.spark.mllib.linalg.Vectors

object HoltWintersCase {

  def main(args:Array[String]): Unit ={
    testS0()
  }

  def testS1(): Unit ={
    val dataStr = "0.014,0.015,0.015,0.014,0.014,0.015,0.014,0.014,0.015,0.014,0.014,0.014,0.015,0.014,0.015,0.014,0.014,0.015,0.016,6.834,6.85,6.795,6.748,0.014,0.014,0.014,0.015,0.014,0.014,0.014,0.014,0.015,0.014,0.014,0.014,0.014,0.015,0.014,0.014,0.014,0.014,0.015,0.015,6.826,6.714,6.781,6.774,0.014,0.014,0.015,0.015,0.037,0.015,0.036,0.037,0.038,0.014,0.04,0.015,0.015,0.017,0.015,0.015,0.015,0.015,0.016,0.015,6.934,6.9,6.915,6.894,0.014,0.014,0.014,0.014,0.014,0.015,0.015,0.015,0.015,0.015,0.014,0.014,0.014,0.015,0.015,0.015,0.015,0.014,0.015,0.014,7.091,7.114,7.079,6.972,0.016,0.014,0.014,0.014,0.014,0.014,0.014,0.015,0.014,0.016,0.013,0.014,0.015,0.015,0.014,0.015,0.015,0.014,0.015,0.014,6.984,7.0,7.026,7.106,0.015,0.017,0.016,0.037,0.038,0.014,0.037,0.038,0.039,0.015,0.038,0.038,0.039,0.015,0.037,0.037,0.04,0.015,0.038,0.038,6.983,6.984,7.005,7.043,0.038,0.015,0.039,0.038,0.038,0.015,0.038,0.038,0.039,0.015,0.039,0.04,0.039,0.016,0.016,0.016,0.039,0.037,0.017,0.016,7.035,7.06,7.052,7.159,0.039,0.039,0.016,0.038,0.038,0.038,0.015,0.038,0.039,0.038,0.015,0.016,0.015,0.016,0.014,0.014,0.014,0.017,0.016,0.015,6.958,6.903,6.896,6.909,0.015,0.04,0.037,0.037,0.016,0.037,0.039,0.037,0.015,0.035,0.039,0.014,0.014,0.015,0.015,0.015,0.015,0.016,0.015,0.017,7.075,7.093,7.056,7.103,0.015,0.015,0.016,0.016,0.038,0.038,0.016,0.04,0.039,0.015,0.015,0.015,0.015,0.015,0.015,0.015,0.015,0.014,0.015,0.014,6.853,6.866,6.823,6.865,0.014,0.014,0.014,0.014,0.014,0.037,0.037,0.037,0.014,0.036,0.014,0.014,0.015,0.015,0.015,0.015,0.015,0.015,0.014,0.015,7.031,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0"
    val data = Vectors.dense(dataStr.split(",").map(_.toDouble))

    val period = 24
    val modeltype = "additive" //additive \ multiplicative
    val methods = "BOBYQA1" //BOBYQA\POWELL\LBFGS\LBFGSB
    val periodNew = if(data.size>=period*7) (7*period) else period
    val model = HoltWinters.fitModel(data, 24, modeltype, methods)
    val predictedVectors=Vectors.dense((0 to 48).map(_.toDouble).toArray)

    println(methods)
    model.forecast(data, predictedVectors)
    println(s"a = ${model.alpha}, b = ${model.beta}, c = ${model.gamma}")
    println(predictedVectors)
  }

  def testS0(): Unit ={
    val dataStr = "0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.632,5.564,5.58,5.6,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.704,5.62,5.604,5.58,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.656,5.604,5.672,5.584,0.0,0.0,0.0,0.008,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.912,5.864,5.864,5.84,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.7,5.54,5.544,5.476,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.824,5.692,5.66,5.628,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.68,5.528,5.528,5.532,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.828,5.624,5.612,5.576,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.688,5.596,5.656,5.588,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6.06,5.86,5.844,5.804,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.816,5.648,5.66,5.668,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.564,5.612,5.572,5.572,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.572,5.6,5.592,5.552,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.184,5.604,5.6,5.516,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.084,5.624,5.636,5.668,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.684,5.664,5.696,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.592,5.6,5.624,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.664,5.572,5.584,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.628,5.592,5.572,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.64,5.584,5.588,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.552,5.716,5.704,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.788,5.732,5.708,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.008,0.0,0.0,0.0,0.0,0.0,5.704,5.7,5.668,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.604,5.612,5.596,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.612,5.6,5.612,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.604,5.6,5.572,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.596,5.556,5.576,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.648,5.596,5.616,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.852,5.84,5.832,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.596,5.588,5.588,0.0,0.0";
    val dataStr1 = "0.014,0.015,0.015,0.014,0.014,0.015,0.014,0.014,0.015,0.014,0.014,0.014,0.015,0.014,0.015,0.014,0.014,0.015,0.016,6.834,6.85,6.795,6.748,0.014,0.014,0.014,0.015,0.014,0.014,0.014,0.014,0.015,0.014,0.014,0.014,0.014,0.015,0.014,0.014,0.014,0.014,0.015,0.015,6.826,6.714,6.781,6.774,0.014,0.014,0.015,0.015,0.037,0.015,0.036,0.037,0.038,0.014,0.04,0.015,0.015,0.017,0.015,0.015,0.015,0.015,0.016,0.015,6.934,6.9,6.915,6.894,0.014,0.014,0.014,0.014,0.014,0.015,0.015,0.015,0.015,0.015,0.014,0.014,0.014,0.015,0.015,0.015,0.015,0.014,0.015,0.014,7.091,7.114,7.079,6.972,0.016,0.014,0.014,0.014,0.014,0.014,0.014,0.015,0.014,0.016,0.013,0.014,0.015,0.015,0.014,0.015,0.015,0.014,0.015,0.014,6.984,7.0,7.026,7.106,0.015,0.017,0.016,0.037,0.038,0.014,0.037,0.038,0.039,0.015,0.038,0.038,0.039,0.015,0.037,0.037,0.04,0.015,0.038,0.038,6.983,6.984,7.005,7.043,0.038,0.015,0.039,0.038,0.038,0.015,0.038,0.038,0.039,0.015,0.039,0.04,0.039,0.016,0.016,0.016,0.039,0.037,0.017,0.016,7.035,7.06,7.052,7.159,0.039,0.039,0.016,0.038,0.038,0.038,0.015,0.038,0.039,0.038,0.015,0.016,0.015,0.016,0.014,0.014,0.014,0.017,0.016,0.015,6.958,6.903,6.896,6.909,0.015,0.04,0.037,0.037,0.016,0.037,0.039,0.037,0.015,0.035,0.039,0.014,0.014,0.015,0.015,0.015,0.015,0.016,0.015,0.017,7.075,7.093,7.056,7.103,0.015,0.015,0.016,0.016,0.038,0.038,0.016,0.04,0.039,0.015,0.015,0.015,0.015,0.015,0.015,0.015,0.015,0.014,0.015,0.014,6.853,6.866,6.823,6.865,0.014,0.014,0.014,0.014,0.014,0.037,0.037,0.037,0.014,0.036,0.014,0.014,0.015,0.015,0.015,0.015,0.015,0.015,0.014,0.015,7.031,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0"
    val data = Vectors.dense(dataStr1.split(",").map(_.toDouble))

    val modeltype = "additive" //additive \ multiplicative
    val predictedVectors=Vectors.dense((0 to 48).map(_.toDouble).toArray)



    try{
      val methods = "BOBYQA1" //BOBYQA\POWELL\LBFGS\LBFGSB
      println(methods)
      val model2 = HoltWinters.fitModel(data, 24, modeltype, methods)
      model2.forecast(data, predictedVectors)
      println(s"a = ${model2.alpha}, b = ${model2.beta}, c = ${model2.gamma}")
      println(predictedVectors)
    } catch {
      case e:Exception => e.printStackTrace();
    }

    try{
      val methods = "BOBYQA" //BOBYQA\POWELL\LBFGS\LBFGSB
      println(methods)
      val model = HoltWinters.fitModel(data, 24, modeltype, methods)
      model.forecast(data, predictedVectors)
      println(s"a = ${model.alpha}, b = ${model.beta}, c = ${model.gamma}")
      println(predictedVectors)
    } catch {
      case e:Exception => e.printStackTrace();
    }
  }
}
